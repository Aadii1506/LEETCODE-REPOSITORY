/*
Brute Force Approach
Run two nested loops to check every possible pair of numbers in the given array to see if they add up to the target sum.
If they add up to the target sum return the indexes.
*/

# BRUTE FORCE:
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j < nums.size(); j++) {
                if (nums[i] + nums[j] == target) {
                    return {i, j};
                }
            }
        }
        return {};
    }
};

/*
APPROACH:
Create an empty unordered map to store the elements of the array.
Loop through the array and for each element, calculate the complement i.e target - element.
Check if the complement exists in the unordered map. If it exists, return the indices of the two elements.
Otherwise, add the current element to the unordered map.
If no such pair is found, return an empty vector.
*/

# OPTIMIZED
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> mp;
        for(int i = 0; i < nums.size(); i++){
            if(mp.find(target - nums[i]) == mp.end())
                mp[nums[i]] = i;
            else
                return {mp[target - nums[i]], i};
        }
 
        return {-1, -1};
    }
};
